
import asyncio
import random
import json
from pathlib import Path
from typing import Dict
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "BOT_TOKEN"
ADMIN_ID = –ê–π–¥–∏ –∞–¥–º–∏–Ω–∞ –≤ —Ç–≥
REPORT_CHAT_ID = ADMIN_ID
DB_FILE = Path("users_db.json")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
class Database:
    def __init__(self):
        self.users: Dict[int, Dict[str, float]] = {}
        self.limited_spins_used = 0
        self.load()

    def load(self):
        try:
            if DB_FILE.exists():
                with open(DB_FILE, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.users = {int(k): v for k, v in data.get('users', {}).items()}
                    self.limited_spins_used = data.get('limited_spins_used', 0)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã: {e}")

    def save(self):
        try:
            with open(DB_FILE, 'w', encoding='utf-8') as f:
                json.dump({
                    'users': self.users,
                    'limited_spins_used': self.limited_spins_used
                }, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã: {e}")

    def get_user(self, user_id: int) -> Dict[str, float]:
        if user_id not in self.users:
            self.users[user_id] = {"diamonds": 0.0, "special_spins": 0}
            self.save()
        return self.users[user_id]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –ù–∞–≥—Ä–∞–¥—ã –¥–ª—è —Ä—É–ª–µ—Ç–æ–∫ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
COMMON_REWARDS = [
    ("–ù–∏—á–µ–≥–æ", 0.6),
    ("0.5 –∞–ª–º–∞–∑–∞", 0.25),
    ("Desk Calendar", 0.1),
    ("Homemade Cake", 0.04),
    ("1 –∞–ª–º–∞–∑", 0.01)
]

ADVANCED_REWARDS = [
    ("–ù–∏—á–µ–≥–æ", 0.5),
    ("Desk Calendar", 0.2),
    ("1 –∞–ª–º–∞–∑", 0.1),
    ("Homemade Cake", 0.1),
    ("Lunar Snake", 0.1)
]

ELITE_REWARDS = [
    ("–ù–∏—á–µ–≥–æ", 0.4),
    ("Homemade Cake", 0.35),
    ("Lunar Snake", 0.15),
    ("Party Sparkler", 0.09),
    ("2 –∞–ª–º–∞–∑–∞", 0.01)
]

LIMITED_REWARDS = [
    ("–ù–∏—á–µ–≥–æ", 0.40),
    ("Candy Cane", 0.15),
    ("Snow Globe", 0.15),
    ("Hex Pot", 0.15),
    ("Santa Hat", 0.15)
]

PREMIUM_REWARDS = [
    ("–ù–∏—á–µ–≥–æ", 0.25),
    ("2 –∞–ª–º–∞–∑–∞", 0.35),
    ("Love Potion", 0.2),
    ("Jack-in-the-box Model Amogus", 0.1),
    ("4 –∞–ª–º–∞–∑–∞", 0.09),
    ("vintage cigar", 0.01)
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def get_spin_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û–±—ã—á–Ω–∞—è (0.25 –∞–ª–º–∞–∑–∞)")],
            [KeyboardButton(text="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è (0.5 –∞–ª–º–∞–∑–∞)")],
            [KeyboardButton(text="–≠–ª–∏—Ç–Ω–∞—è (1 –∞–ª–º–∞–∑)")],
            [KeyboardButton(text="–õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è (0.6 –∞–ª–º–∞–∑–∞)")],
            [KeyboardButton(text="–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è (2 –∞–ª–º–∞–∑–∞)")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/balance"), KeyboardButton(text="/spin")],
            [KeyboardButton(text="/topup")]
        ],
        resize_keyboard=True
    )

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def spin_roulette(rewards):
    rand = random.random()
    cumulative = 0
    for prize, prob in rewards:
        cumulative += prob
        if rand < cumulative:
            return prize
    return rewards[-1][0]

async def send_spin_report(user_id: int, spin_type: str, prize: str, cost: float):
    user = db.get_user(user_id)
    report = (
        f"üé∞ –û—Ç—á–µ—Ç –æ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        f"–¢–∏–ø —Ä—É–ª–µ—Ç–∫–∏: {spin_type}\n"
        f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {cost} –∞–ª–º–∞–∑–æ–≤\n"
        f"–í—ã–∏–≥—Ä—ã—à: {prize}\n"
        f"–ë–∞–ª–∞–Ω—Å: {user['diamonds']} –∞–ª–º–∞–∑–æ–≤"
    )
    await bot.send_message(REPORT_CHAT_ID, report)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start(message: types.Message):
    db.get_user(message.from_user.id)
    await message.answer(
        "üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —Å —Ä—É–ª–µ—Ç–∫–∞–º–∏!\n"
        "/balance - –≤–∞—à –±–∞–ª–∞–Ω—Å\n"
        "/spin - –∫—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫–∏\n"
        "/topup - –ø—Ä–∞–π—Å –Ω–∞ –∞–ª–º–∞–∑—ã",
        reply_markup=get_main_keyboard()
    )

@dp.message(Command("balance"))
async def balance(message: types.Message):
    user = db.get_user(message.from_user.id)
    await message.answer(
        f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å:\n"
        f"–ê–ª–º–∞–∑—ã: {user['diamonds']}\n"
        f"–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏: {user['special_spins']}"
    )

@dp.message(Command("spin"))
async def spin_menu(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–ª–µ—Ç–∫—É:\n"
        "–°–ø–∏—Å–æ–∫ —Ä—É–ª–µ—Ç–æ–∫: –û–±—ã—á–Ω–∞—è- —Å—Ç–æ–∏–º–æ—Å—Ç—å 0,25 –∞–ª–º–∞–∑–∞, —à–∞–Ω—Å—ã: –Ω–∏—á–µ–≥–æ-60%, 0,5 –∞–ª–º–∞–∑–∞-25%, desk calendar-10%, homemade cake-4%, 1 –∞–ª–º–∞–∑- 1%.\n"
    "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è- —Å—Ç–æ–∏–º–æ—Å—Ç—å 0,5 –∞–ª–º–∞–∑–∞, —à–∞–Ω—Å—ã: –Ω–∏—á–µ–≥–æ-50%, desk calendar-20%, 1 –∞–ª–º–∞–∑- 10%, homemade cake-10%, lunar snake-10%.\n"
    "–≠–ª–∏—Ç–Ω–∞—è- —Å—Ç–æ–∏–º–æ—Å—Ç—å 1 –∞–ª–º–∞–∑, —à–∞–Ω—Å—ã: –Ω–∏—á–µ–≥–æ-40%, homemade cake-35%, lunar snake-15%, party sparkler-9%, 2 –∞–ª–º–∞–∑–∞-1%.\n"
    "–õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è(—Ç–æ–ª—å–∫–æ 5 –ø—Ä–æ–∫—Ä—É—Ç–æ–≤ –Ω–∞ –≤—Å–µ—Ö)- —Å—Ç–æ–∏–º–æ—Å—Ç—å 0,6 –∞–ª–º–∞–∑–∞, —à–∞–Ω—Å—ã: –Ω–∏—á–µ–≥–æ-40%, candy cane-15%, snow globe-15%, hex pot-15%, santa hat-15%.\n"
    "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è- —Å—Ç–æ–∏–º–æ—Å—Ç—å 2 –∞–ª–º–∞–∑–∞, —à–∞–Ω—Å—ã: –Ω–∏—á–µ–≥–æ-25%, 2 –∞–ª–º–∞–∑–∞-35%,  love potion-20%, jack-in-the-box model amogus-10%, 4 –∞–ª–º–∞–∑–∞-9%, vintage cigar-1%.",
        reply_markup=get_spin_keyboard()
    )

@dp.message(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

@dp.message(lambda message: message.text.startswith((
    "–û–±—ã—á–Ω–∞—è", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è", "–≠–ª–∏—Ç–Ω–∞—è", "–õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è"
)))
async def handle_spin(message: types.Message):
    user = db.get_user(message.from_user.id)
    spin_text = message.text
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä—É–ª–µ—Ç–∫–∏
    if spin_text.startswith("–û–±—ã—á–Ω–∞—è"):
        spin_type = "–û–±—ã—á–Ω–∞—è"
        cost = 0.25
        rewards = COMMON_REWARDS
    elif spin_text.startswith("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è"):
        spin_type = "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è"
        cost = 0.5
        rewards = ADVANCED_REWARDS
    elif spin_text.startswith("–≠–ª–∏—Ç–Ω–∞—è"):
        spin_type = "–≠–ª–∏—Ç–Ω–∞—è"
        cost = 1.0
        rewards = ELITE_REWARDS
    elif spin_text.startswith("–õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è"):
        spin_type = "–õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è"
        cost = 0.6
        rewards = LIMITED_REWARDS
        if db.limited_spins_used >= 5:
            await message.answer("–õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä—É–ª–µ—Ç–∫–∞ –∏—Å—á–µ—Ä–ø–∞–ª–∞ –≤—Å–µ 5 –ø—Ä–æ–∫—Ä—É—Ç–æ–∫!")
            return
    elif spin_text.startswith("–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è"):
        spin_type = "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è"
        cost = 2.0
        rewards = PREMIUM_REWARDS
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    if user["diamonds"] < cost:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–ª–º–∞–∑–æ–≤!", reply_markup=get_spin_keyboard())
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –¥–ª—è –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä—É–ª–µ—Ç–∫–∏
    if spin_type == "–õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è" and db.limited_spins_used >= 5:
        await message.answer("–õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä—É–ª–µ—Ç–∫–∞ –∏—Å—á–µ—Ä–ø–∞–ª–∞ –≤—Å–µ 5 –ø—Ä–æ–∫—Ä—É—Ç–æ–∫!")
        return
    
    # –°–ø–∏–Ω
    user["diamonds"] -= cost
    prize = spin_roulette(rewards)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
    if "–∞–ª–º–∞–∑" in prize:
        amount = float(prize.split()[0])
        user["diamonds"] += amount
        prize_text = f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {amount} –∞–ª–º–∞–∑–æ–≤!"
    else:
        prize_text = f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: {prize}"
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Ä—É—Ç–æ–∫
    if spin_type == "–õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è":
        db.limited_spins_used += 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    db.save()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await message.answer(
        f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç ({spin_type}):\n{prize_text}\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –∞–ª–º–∞–∑–æ–≤: {user['diamonds']:.2f}",
        reply_markup=get_spin_keyboard()
    )
    
    # –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
    await send_spin_report(message.from_user.id, spin_type, prize, cost)

@dp.message(Command("add_diamonds"))
async def add_diamonds(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        parts = message.text.split()
        if len(parts) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
        
        user_id = int(parts[1])
        amount = float(parts[2])
        
        user = db.get_user(user_id)
        user["diamonds"] += amount
        db.save()
        
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤—ã–¥–∞–Ω–æ {amount} –∞–ª–º–∞–∑–æ–≤\n"
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user['diamonds']} –∞–ª–º–∞–∑–æ–≤"
        )
        
        try:
            await bot.send_message(
                user_id,
                f"üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} –∞–ª–º–∞–∑–æ–≤!\n"
                f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user['diamonds']} –∞–ª–º–∞–∑–æ–≤"
            )
        except:
            pass
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_diamonds user_id amount")

@dp.message(Command("reset_limited"))
async def reset_limited(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    db.limited_spins_used = 0
    db.save()
    await message.answer("‚úÖ –°—á–µ—Ç—á–∏–∫ –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Ä—É—Ç–æ–∫ —Å–±—Ä–æ—à–µ–Ω")

@dp.message(Command("call"))
async def call_command(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    text_to_send = message.text.replace('/call', '').strip()
    if not text_to_send:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /call –≤–∞—à —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
        return
    
    await message.answer(f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {len(db.users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    success_count = 0
    fail_count = 0
    
    for user_id in db.users.keys():
        try:
            await bot.send_message(user_id, text_to_send)
            success_count += 1
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            fail_count += 1
        await asyncio.sleep(0.1)
    
    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {fail_count}"
    )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
